stages:
  - build
  - test
  - build-docker-images
  - deploy

cache:
  key: one-key-to-rule-them-all
  paths:
    - ./.m2/repository
    - ./resources/public/node_modules

variables:
  IMAGE_TAGGED: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID

# ------------------------------------------------------------------------------

lint:
  image: clojure:openjdk-17-tools-deps-slim-bullseye
  script:
    - clojure -Sdeps '{:mvn/local-repo "./.m2/repository"}' -M:clj-kondo --lint src
  allow_failure: true
  when: always

up-to-date?:
  image: clojure:openjdk-17-tools-deps-slim-bullseye
  script:
    - clojure -Sdeps '{:mvn/local-repo "./.m2/repository"}' -M:outdated
  allow_failure: true
  when: always

# ------------------------------------------------------------------------------

build-image:
  image: docker
  tags:
    - ht
  services:
    - docker:dind
  stage: build-docker-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - >
      docker build -f Dockerfile --pull
      -t $IMAGE_TAGGED .
    - docker push $IMAGE_TAGGED
    - docker tag $IMAGE_TAGGED $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# ------------------------------------------------------------------------------

deploy:
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  variables:
    HOME: "/tmp"
  stage: deploy
  before_script:
    - mkdir $HOME/.kube
    - echo "$KUBECONFIG_COMPLETE" >> $HOME/.kube/config
  script:
    - kubectl -n schnaq-academy set image deployment/academy academy=$CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  only:
    - main
